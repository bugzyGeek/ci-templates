name: Reusable NuGet Publish

on:
  workflow_call:
    inputs:
      dotnet-version:
        required: false
        type: string
        default: '8.0.x'

permissions:
  contents: write  # Required for creating tags and releases
  id-token: write  # Required for Trusted Publishing

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release

      - name: Check for .nuspec file
        id: check_nuspec
        run: |
          if ls *.nuspec 1> /dev/null 2>&1; then
            echo "nuspec=true" >> $GITHUB_OUTPUT
          else
            echo "nuspec=false" >> $GITHUB_OUTPUT
          fi

      - name: Calculate version from Git history
        id: calc_version
        run: |
          # Fetch all tags and history
          git fetch --tags --unshallow || git fetch --tags
          
          # Get the latest tag version or start with 0.0.0
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=$(echo $LATEST_TAG | sed 's/^v//')
          
          # Parse version components
          IFS='.' read -ra VERSION_PARTS <<< "$LATEST_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Get commits since last tag
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s" --no-merges)
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s" --no-merges)
          fi
          
          # Analyze commit messages for version bumping
          BUMP_MAJOR=false
          BUMP_MINOR=false
          BUMP_PATCH=false
          
          while IFS= read -r commit; do
            # Check for breaking changes (major version bump)
            if echo "$commit" | grep -iE "(breaking|break|major|BREAKING CHANGE)" > /dev/null; then
              BUMP_MAJOR=true
            # Check for new features (minor version bump)
            elif echo "$commit" | grep -iE "(feat|feature|add|new)" > /dev/null; then
              BUMP_MINOR=true
            # Check for fixes, updates, etc. (patch version bump)
            elif echo "$commit" | grep -iE "(fix|patch|update|refactor|perf|style|docs|test)" > /dev/null; then
              BUMP_PATCH=true
            fi
          done <<< "$COMMITS"
          
          # Calculate new version based on semantic versioning
          if [ "$BUMP_MAJOR" = true ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP_MINOR" = true ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "$BUMP_PATCH" = true ]; then
            PATCH=$((PATCH + 1))
          else
            # If no conventional commits found, default to patch bump
            PATCH=$((PATCH + 1))
          fi
          
          # Handle pre-release versions if on non-main branch
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          if [ "${{ github.ref_name }}" != "main" ] && [ "${{ github.ref_name }}" != "master" ]; then
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
            BUILD_NUMBER=$(git rev-list --count HEAD)
            NEW_VERSION="${NEW_VERSION}-${BRANCH_NAME}.${BUILD_NUMBER}"
          fi
          
          echo "Previous version: $LATEST_VERSION"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT


      - name: Install dos2unix
        run: sudo apt-get update && sudo apt-get install -y dos2unix

      - name: Update .nuspec placeholders
        if: steps.check_nuspec.outputs.nuspec == 'true'
        run: |
          VERSION="${{ steps.calc_version.outputs.version }}"
          
          grep '\$version\$' Conflux.Paginize.nuspec
          grep '\$projectUrl\$' Conflux.Paginize.nuspec
          grep '\$repositoryUrl\$' Conflux.Paginize.nuspec

          dos2unix Conflux.Paginize.nuspec

          # Set repository URL
          REPO_URL="https://github.com/${{ github.repository }}"
          PROJECT_URL="https://github.com/${{ github.repository }}"
          
          echo "Updating .nuspec files with version: $VERSION"
          
          # Update all .nuspec files with placeholders
          for file in *.nuspec; do
            echo "Processing $file"
            LC_ALL=C sed -i "s|\$version\$|$VERSION|g" "$file"
            LC_ALL=C sed -i "s|\$projectUrl\$|$PROJECT_URL|g" "$file"
            LC_ALL=C sed -i "s|\$repositoryUrl\$|$REPO_URL|g" "$file"
          done
          cat Conflux.Paginize.nuspec

      - name: Install mono
        if: steps.check_nuspec.outputs.nuspec == 'true'
        run: sudo apt-get update && sudo apt-get install -y mono-complete

      - name: Download nuget.exe
        if: steps.check_nuspec.outputs.nuspec == 'true'
        run: |
          curl -L -o nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe

      - name: Pack NuGet using nuget.exe
        if: steps.check_nuspec.outputs.nuspec == 'true'
        run: |
          mkdir -p ./nuget
          for file in *.nuspec; do
            mono nuget.exe pack "$file" -OutputDirectory ./nuget
          done

      - name: Push to NuGet using Trusted Publishing
        if: steps.check_nuspec.outputs.nuspec == 'true'
        run: |
          dotnet nuget push ./nuget/*.nupkg \
            --source https://api.nuget.org/v3/index.json

      - name: Create Git Tag
        if: steps.check_nuspec.outputs.nuspec == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: |
          VERSION="${{ steps.calc_version.outputs.version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if tag already exists
          if ! git rev-parse "v$VERSION" >/dev/null 2>&1; then
            git tag -a "v$VERSION" -m "Release version $VERSION"
            git push origin "v$VERSION"
            echo "Created and pushed tag v$VERSION"
          else
            echo "Tag v$VERSION already exists, skipping tag creation"
          fi

      - name: Generate Release Notes
        if: steps.check_nuspec.outputs.nuspec == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        id: release_notes
        run: |
          VERSION="${{ steps.calc_version.outputs.version }}"
          
          # Get the latest tag (excluding the one we just created)
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "v$VERSION" | head -n1)
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # First release - get all commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since previous tag
            COMMITS=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Create release notes
          RELEASE_NOTES="## What's Changed\n\n$COMMITS\n\n## NuGet Package\n\nThis release is available on NuGet.org"
          
          # Save to file and output
          echo -e "$RELEASE_NOTES" > release_notes.md
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo -e "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release with NuGet Package
        if: steps.check_nuspec.outputs.nuspec == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.calc_version.outputs.version }}"
          
          # Create release with GitHub CLI
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes "${{ steps.release_notes.outputs.notes }}" \
            ./nuget/*.nupkg
